#!/usr/bin/env python3
"""Generate a Markdown report from analyze_streaks output."""

from __future__ import annotations

import contextlib
import io
import re
from datetime import datetime
from pathlib import Path

import analyze_streaks


def build_markdown(raw_text: str) -> str:
    lines = raw_text.splitlines()
    markdown_lines: list[str] = []
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    markdown_lines.append("# MLB Streaks Analysis")
    markdown_lines.append(
        f"_Generated by `analyze_streaks.py` on {timestamp} (local time)_"
    )
    markdown_lines.append("")

    in_code_block = False

    for line in lines:
        raw = line.rstrip("\n")
        stripped = raw.strip()
        indent = len(raw) - len(raw.lstrip(" "))

        if in_code_block:
            if stripped and indent > 2:
                markdown_lines.append(raw)
                continue

            markdown_lines.append("```")
            in_code_block = False
            if not stripped:
                if markdown_lines and markdown_lines[-1] != "":
                    markdown_lines.append("")
                continue
            # fall through to regular handling for the current line

        if not stripped:
            if markdown_lines and markdown_lines[-1] != "":
                markdown_lines.append("")
            continue

        lower = stripped.lower()

        if lower.startswith("distribution"):
            if markdown_lines and markdown_lines[-1] != "":
                markdown_lines.append("")
            markdown_lines.append(stripped)
            markdown_lines.append("")
            markdown_lines.append("```text")
            in_code_block = True
            continue

        if indent == 0:
            if markdown_lines and markdown_lines[-1] != "":
                markdown_lines.append("")
            markdown_lines.append(f"## {stripped.rstrip(':')}")
            continue

        if indent <= 4:
            threshold_match = re.match(r"(?P<thresh>\d+\+): (?P<rest>.*)", stripped)
            if threshold_match:
                if markdown_lines and markdown_lines[-1] != "":
                    markdown_lines.append("")
                thresh = threshold_match.group("thresh")
                rest = threshold_match.group("rest")
                markdown_lines.append(f"**{thresh}** {rest}")
                continue

            if (
                re.match(r"\d{4}: ", stripped)
                or stripped.startswith("2025")
                or stripped.lower().startswith("current")
            ):
                markdown_lines.append(f"- {stripped}")
                continue

            markdown_lines.append(stripped)
            continue

        markdown_lines.append(stripped)

    if in_code_block:
        markdown_lines.append("```")

    return "\n".join(markdown_lines).rstrip() + "\n"


def main() -> None:
    buffer = io.StringIO()
    with contextlib.redirect_stdout(buffer):
        analyze_streaks.main()
    raw_text = buffer.getvalue()
    markdown_text = build_markdown(raw_text)

    output_path = Path("analyze_streaks_report.md")
    output_path.write_text(markdown_text, encoding="utf-8")


if __name__ == "__main__":
    main()
